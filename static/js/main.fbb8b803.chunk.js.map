{"version":3,"sources":["Image/mypicture3.png","Updating/Image/dogImage.jpg","HomePage.js","Components/updating.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","className","src","pic3","alt","href","target","to","Updating","picDog","App","path","extract","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,qNC0B5BC,MAtBf,WACE,OACI,yBAAKC,UAAU,OACb,yBAAKC,IAAKC,IAAMC,IAAI,kBAAkBH,UAAU,YAChD,2CACA,qDACA,uEACA,oIAEA,4BACE,4BAAI,uBAAGI,KAAK,sCAAsCC,OAAO,UAAS,uBAAGL,UAAU,gCAA3E,YACJ,4BAAI,uBAAGI,KAAK,uCAAuCC,OAAO,UAAS,uBAAGL,UAAU,0BAA5E,eAGN,kBAAC,IAAD,CAAMM,GAAG,aACP,4BAAI,uBAAGN,UAAU,UAAS,uBAAGA,UAAU,mC,yBCAlCO,MAff,WAEQ,OACI,yBAAKP,UAAU,QACX,yBAAKC,IAAKO,IAAQL,IAAI,WAAWH,UAAU,YAC3C,uEACA,uBAAGI,KAAK,iBAAgB,uBAAGJ,UAAU,gC,OCStCS,MAbf,WAGE,OACE,kBAAC,IAAD,KACI,yBAAKT,UAAU,OACZ,kBAAC,IAAD,CAAOU,KAAK,IAAIC,SAAO,EAACC,UAAWb,IACnC,kBAAC,IAAD,CAAOW,KAAK,YAAYE,UAAWL,OCD1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbb8b803.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mypicture3.bc44a536.png\";","module.exports = __webpack_public_path__ + \"static/media/dogImage.f0146a16.jpg\";","import React, { useState } from 'react';\r\nimport './style.css';\r\nimport pic3 from './Image/mypicture3.png';\r\nimport {Link} from  'react-router-dom';\r\nfunction HomePage() {\r\n  return (\r\n      <div className=\"box\">\r\n        <img src={pic3} alt=\"thisismypicture\" className=\"box-img\"></img>\r\n        <h1>Ky Huu Dong</h1>\r\n        <h3>Da Nang City,Viet Nam</h3>\r\n        <h3>IT Major | Duy Tan University's student</h3>\r\n        <h5>Handsome, talented, top thinking, leadership, and\r\n            many other qualities are what i have üòù.</h5>\r\n        <ul>\r\n          <li><a href=\"https://www.facebook.com/huu.dong.1\" target=\"_blank\"><i className=\"fa fa-facebook-square fa-3x\"></i>acebook</a></li>\r\n          <li><a href=\"https://www.instagram.com/dongghuuu/\" target=\"_blank\"><i className=\"fa fa-instagram fa-3x\"></i>Instagram</a></li>\r\n\r\n        </ul>\r\n        <Link to='/updating'>\r\n          <li><a className=\"update\"><i className=\"fa fa-chevron-right fa-2x\"></i></a></li>\r\n        </Link>\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport '../Updating/style.css';\r\nimport picDog from '../Updating/Image/dogImage.jpg';\r\n\r\nfunction Updating() {\r\n\r\n        return(\r\n            <div className=\"boxx\">\r\n                <img src={picDog} alt=\"dogimage\" className=\"box-img\"></img>\r\n                <h2>This feature i am updating üçî</h2>\r\n                <a href=\"../index.html\"><i className=\"fa fa-chevron-left fa-3x\"></i></a>\r\n\r\n            </div>\r\n        )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Updating;","import React, { useState } from 'react';\nimport HomePage from './HomePage';\nimport Updating from './Components/updating';\nimport {BrowserRouter as Router, Switch, Route} from  'react-router-dom';\n\n\nfunction App() {\n\n\n  return (\n    <Router>\n        <div className=\"App\">\n           <Route path=\"/\" extract component={HomePage} />\n           <Route path=\"/updating\" component={Updating} />\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}