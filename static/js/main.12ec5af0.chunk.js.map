{"version":3,"sources":["Image/mypicture3.png","Image/peaceful.jpg","Image/dogImage.jpg","Image/background.jpg","Components/HomePage.js","Components/updating.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","useEffect","document","body","style","backgroundImage","background","backgroundRepeat","className","src","pic3","alt","href","target","to","Updating","picDog","App","path","extract","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,iBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gOC8C5BC,MAxCf,WAOE,OALAC,qBAAU,WACRC,SAASC,KAAKC,MAAMC,gBAApB,cAA6CC,IAA7C,KACAJ,SAASC,KAAKC,MAAMG,iBAAmB,eAIvC,yBAAKC,UAAU,OACb,yBAAKC,IAAKC,IAAMC,IAAI,kBAAkBH,UAAU,YAChD,2CACA,qDACA,uEACA,oIAIA,4BACE,4BACE,uBAAGI,KAAK,sCAAsCC,OAAO,UACnD,uBAAGL,UAAU,gCADf,YAIF,4BACE,uBAAGI,KAAK,uCAAuCC,OAAO,UACpD,uBAAGL,UAAU,0BADf,eAKJ,kBAAC,IAAD,CAAMM,GAAG,aACP,4BACE,uBAAGN,UAAU,UACX,uBAAGA,UAAU,mC,0CCZVO,MApBf,WAQQ,OANJd,qBAAU,WACFC,SAASC,KAAKC,MAAMC,gBAApB,cAA6CC,IAA7C,KACAJ,SAASC,KAAKC,MAAMG,iBAAmB,cAC5C,IAIK,yBAAKC,UAAU,SACX,yBAAKC,IAAKO,IAAQL,IAAI,WAAWH,UAAU,cAC3C,uEAEA,kBAAC,IAAD,CAAMM,GAAG,KACL,2BAAG,uBAAGN,UAAU,iC,OCDrBS,MAdf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,aAEX,kBAAC,IAAD,CAAOU,KAAK,IAAIC,SAAO,EAACC,UAAWpB,IACnC,kBAAC,IAAD,CAAOkB,KAAK,YAAYE,UAAWL,QCA3BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.12ec5af0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mypicture3.bc44a536.png\";","module.exports = __webpack_public_path__ + \"static/media/peaceful.cd6eeecd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dogImage.f0146a16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.2e874686.jpg\";","import React, { useEffect } from \"react\";\r\nimport \"../css/style.css\";\r\nimport pic3 from \"../Image/mypicture3.png\";\r\nimport background from '../Image/peaceful.jpg'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction HomePage() {\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundImage = `url(${background})`;\r\n    document.body.style.backgroundRepeat = \"no-repeat\";\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <img src={pic3} alt=\"thisismypicture\" className=\"box-img\"></img>\r\n      <h1>Ky Huu Dong</h1>\r\n      <h3>Da Nang City,Viet Nam</h3>\r\n      <h3>IT Major | Duy Tan University's student</h3>\r\n      <h5>\r\n        Handsome, talented, top thinking, leadership, and many other qualities\r\n        are what i have üòù.\r\n      </h5>\r\n      <ul>\r\n        <li>\r\n          <a href=\"https://www.facebook.com/huu.dong.1\" target=\"_blank\">\r\n            <i className=\"fa fa-facebook-square fa-3x\"></i>acebook\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://www.instagram.com/dongghuuu/\" target=\"_blank\">\r\n            <i className=\"fa fa-instagram fa-3x\"></i>Instagram\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <Link to=\"/updating\">\r\n        <li>\r\n          <a className=\"update\">\r\n            <i className=\"fa fa-chevron-right fa-2x\"></i>\r\n          </a>\r\n        </li>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { useEffect } from 'react';\r\nimport '../css/u-style.css';\r\nimport picDog from '../Image/dogImage.jpg';\r\nimport background from '../Image/background.jpg';\r\nimport {Link} from  'react-router-dom';\r\n\r\nfunction Updating() {\r\n\r\n    useEffect(() => {\r\n            document.body.style.backgroundImage = `url(${background})`;\r\n            document.body.style.backgroundRepeat = \"no-repeat\";\r\n    }, [])\r\n\r\n\r\n        return(\r\n            <div className=\"u-box\">\r\n                <img src={picDog} alt=\"dogimage\" className=\"u-box-img\"></img>\r\n                <h2>This feature i am updating üçî</h2>\r\n\r\n                <Link to='/'>\r\n                    <a><i className=\"fa fa-chevron-left fa-3x\"></i></a>\r\n                 </Link>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Updating;","import React, { useState } from \"react\";\nimport HomePage from \"./Components/HomePage\";\nimport Updating from \"./Components/updating\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"container\">\n          \n            <Route path=\"/\" extract component={HomePage}></Route>\n            <Route path=\"/updating\" component={Updating}></Route>\n          \n        </div>\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}